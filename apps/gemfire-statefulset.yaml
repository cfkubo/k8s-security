# This is a sample StatefulSet configuration for GemFire on Kubernetes - TESTING NEEDED
# This guide is desgined to be used with the GemFire Docker images available on Docker Hub and only for testing and poc purposes. NOT FOR PRODUCTION USE.

# Create a secret for pulling GemFire images from Docker Hub
# Replace <your-docker-username>, <your-docker-password>, <your-email> with your Docker Hub credentials

# kubectl create secret docker-registry docker \
#   --docker-username=<your-docker-username> \
#   --docker-password=<your-docker-password> \
#   --docker-email=<your-email>


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gemfire-locator
spec:
  serviceName: "gemfire-locator" # Important for headless service discovery
  replicas: 1
  selector:
    matchLabels:
      app: gemfire-locator
  template:
    metadata:
      labels:
        app: gemfire-locator
    spec:
      restartPolicy: Always # Ensure the pod is restarted on failures
      imagePullSecrets:
      - name: docker # Add imagePullSecrets
      containers:
      - name: gemfire-locator
        image: gemfire/gemfire-all:10.1-jdk17  #gemfire/gemfire:10.0.3 # gemfire/gemfire-all:10.1-jdk17
        ports:
        - containerPort: 10334
        - containerPort: 7070
        - containerPort: 1099
        command:
        - gfsh
        - start
        - locator
        - --name=locator-0
        - --port=10334
       ## - --hostname-for-clients=gemfire-locator-service.default.svc.cluster.local #$(POD_IP) # Use POD_IP for client access
        - --J='-Dgemfire.jmx-manager-hostname-for-clients=gemfire-locator-0'
        - --dir=/data/$(POD_NAME) # Use unique directory for each locator instance
        env:
        - name: ACCEPT_TERMS
          value: "y"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        # readinessProbe: # Kubernetes readiness probe
        #   httpGet:
        #     path: /management/v1/members/locator-0
        #     port: 7070
        #   initialDelaySeconds: 5
        #   periodSeconds: 30
        #   failureThreshold: 5
        resources: # Add resource requests/limits as needed
          requests:
            cpu: 1
            memory: 2Gi
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts: # If you need persistence
        - name: gemfire-data
          mountPath: /data
      volumes: # If you need persistence
      - name: gemfire-data
        persistentVolumeClaim:
          claimName: gemfire-pvc # Replace with your PVC name

---
apiVersion: v1
kind: Service
metadata:
  name: gemfire-locator-service
spec:
  selector:
    app: gemfire-locator
  ports:
  - protocol: TCP
    port: 10334
    targetPort: 10334
    name: locator
  - protocol: TCP
    port: 7070
    name: tcp
    targetPort: 7070
  - protocol: TCP
    port: 1099
    targetPort: 1099
    name: jmx
  type: ClusterIP # or NodePort, LoadBalancer based on your requirement

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gemfire-server
spec:
  serviceName: "gemfire-server"
  replicas: 1
  selector:
    matchLabels:
      app: gemfire-server
  template:
    metadata:
      labels:
        app: gemfire-server
    spec:
      restartPolicy: Always # Ensure the pod is restarted on failures
      imagePullSecrets:
      - name: docker # Add imagePullSecrets
      # initContainers:
      # - name: wait-for-locator
      #   image: bitnami/kubectl
      #   env:
      #   - name: LOCATOR_POD_IP
      #     valueFrom:
      #       fieldRef:
      #         fieldPath: status.podIP
      #   command:
      #   - sh
      #   - -c
      #   - |
      #     count=0
      #     POD_IPS=$(kubectl get pod gemfire-locator-0 -o jsonpath='{.status.podIP}')
      #     echo "POD_IPS=$POD_IPS"
      #     until nc -zv $POD_IPS 10334 || [ $count -eq 5 ]; do
      #       echo waiting for gemfire-locator-service
      #       sleep 2
      #       count=$((count + 1))
      #     done
      #     if [ $count -eq 5 ]; then
      #       echo "Failed to connect to gemfire-locator-service after 5 attempts"
      #       exit 1
      #     fi
      containers:
      #- name: ip-updater # Regular container for updates
      #  image: bitnami/kubectl # Or a small image with kubectl and jq
      #  command:
      #  - /bin/sh
      #  - -c
      #  - |
       #   POD_IPS=$(kubectl get pod gemfire-locator-0 -o jsonpath='{.status.podIP}')
       #   echo "$POD_IPS" > /tmp/pod_ips.env
        #  echo $POD_IPS
        #  kubectl create configmap pod-ips-config --from-file=pod_ips=/tmp/pod_ips.env --dry-run=client -o yaml | kubectl apply -f -
       # volumeMounts:
       # - name: config-volume
       #   mountPath: /tmp
      - name: gemfire-server
        image: gemfire/gemfire-all:10.1-jdk17 #gemfire/gemfire:10.0.3 #gemfire/gemfire-all:10.1-jdk17
        ports:
        - containerPort: 7070
        - containerPort: 7071
        - containerPort: 40405
        command:
        - gfsh
        - start
        - server
        - --name=server-0
        - --locators=gemfire-locator-0[10334] #gemfire-locator-service.default.svc.cluster.local[10334] # Ensure correct service name and namespace
        # - --server-bind-address=gemfire-server-service.default.svc.cluster.local
        #- --start-rest-api
        #- --http-service-port=7070
        env:
        #- name: POD_IPS
        #  valueFrom:
        #    configMapKeyRef:
        #      name: pod-ips-config
        #      key: pod_ips
        - name: ACCEPT_TERMS
          value: "y"
        # envFrom: # Optional: If you have a ConfigMap for env vars
        # - configMapRef:
        #     name: gemfire-config # Replace with your ConfigMap name
        # readinessProbe:
        #   httpGet:
        #     path: /gemfire-api/v1/ping
        #     port: 7070
        #   initialDelaySeconds: 5
        #   periodSeconds: 5
        #   failureThreshold: 5
        resources:
          requests:
            cpu: 1
            memory: 2Gi
          limits:
            cpu: 2
            memory: 2Gi
        #volumeMounts: # If you need persistence
        #- name: gemfire-data
        #  mountPath: /data
        #- name: config-volume
        #  mountPath: /tmp
      #volumes: # If you need persistence
      #- name: gemfire-data
      #  persistentVolumeClaim:
       #   claimName: gemfire-pvc-server # Replace with your PVC name
      #- name: config-volume
      #  emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-ips-config
data: {}

---
apiVersion: v1
kind: Service
metadata:
  name: gemfire-server-service
spec:
  selector:
    app: gemfire-server
  ports:
  - protocol: TCP
    port: 7070
    name: tcp
    targetPort: 7070
  - protocol: TCP
    port: 7071
    targetPort: 7071
    name: jmx
  - protocol: TCP
    port: 40405
    targetPort: 40405
    name: locator
  type: ClusterIP # or NodePort, LoadBalancer based on your requirement
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: management-console
spec:
  replicas: 1
  selector:
    matchLabels:
      app: management-console
  template:
    metadata:
      labels:
        app: management-console
    spec:
      imagePullSecrets:
      - name: docker # Add imagePullSecrets
      containers:
      - name: management-console
        image: gemfire/gemfire-management-console:latest
        ports:
        - containerPort: 8080
        # readinessProbe:
        #   httpGet:
        #     path: /
        #     port: 8080
        #   initialDelaySeconds: 5
        #   periodSeconds: 30
        #   failureThreshold: 5
        # livenessProbe: # Add liveness probe
        #   httpGet:
        #     path: /
        #     port: 8080
        #   initialDelaySeconds: 5
        #   periodSeconds: 30
        #   failureThreshold: 5
        resources:
          requests:
            cpu: 1
            memory: 1Gi
          limits:
            cpu: 2
            memory: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: management-console
spec:
  selector:
    app: management-console
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP # or ClusterIP, NodePort based on your requirement
---
apiVersion: v1
kind: PersistentVolumeClaim # If you need persistence
metadata:
  name: gemfire-pvc
spec:
  accessModes: [ "ReadWriteOnce" ] # Or ReadWriteMany if your storage supports it
  resources:
    requests:
      storage: 10Gi # Adjust as needed

---
apiVersion: v1
kind: PersistentVolumeClaim # If you need persistence
metadata:
  name: gemfire-pvc-server
spec:
  accessModes: [ "ReadWriteOnce" ] # Or ReadWriteMany if your storage supports it
  resources:
    requests:
      storage: 10Gi # Adjust as needed

## Optional: ConfigMap for GemFire specific configuration  TESTING NEEDED
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: gemfire-config
# data:
#   # GemFire specific configuration
#   GEMFIRE_CACHE_XML: |
#     <?xml version="1.0"?>
#     <cache xmlns="http://geode.apache.org/schema/cache"
#            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
#            xsi:schemaLocation="http://geode.apache.org/schema/cache http://geode.apache.org/schema/cache/cache-1.0.xsd"
#            version="1.0">
#       <region name="myRegion">
#         <region-attributes data-policy="NORMAL"/>
#       </region>
#     </cache>
#   GEMFIRE_LOCATOR_PORT: "10334" # Example port override
#   JAVA_OPTS: "-Xmx2g -XX:+UseG1GC"  # Example JVM options
#   # Other environment variables as needed
#   CLUSTER_NAME: "my-gemfire-cluster"
#   # ... any other env vars
