apiVersion: v1
kind: Pod
metadata:
  name: pod-with-pod-ips
spec:
  # initContainers:
  # - name: get-pod-ips
  #   image: bitnami/kubectl # Or alpine/jq if you prefer
  #   command:
  #   - /bin/sh
  #   - -c
  #   - |
  #     POD_IPS=$(kubectl get pods -o jsonpath='{.items[*].status.podIP}')
  #     echo "POD_IPS=$POD_IPS" > /etc/config/pod_ips.env
  #   volumeMounts:
  #   - name: config-volume
  #     mountPath: /etc/config
  containers:
  - name: main-container
    image: bitnami/kubectl # Your application image
    command:
    - /bin/sh
    - -c
    - |
      POD_IPS=$(kubectl get pod gemfire-locator-0 -o jsonpath='{.status.podIP}')
      echo "POD_IPS=$POD_IPS"
    # env:
    # - name: POD_IPS
    #   valueFrom:
    #     configMapKeyRef: # Use configMapKeyRef
    #       name: pod-ips-config # Name of the ConfigMap
    #       key: pod_ips # Key in the ConfigMap
    # volumeMounts:
    # - name: config-volume
    #   mountPath: /etc/config
  # volumes:
  # - name: config-volume
  #   emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-ips-config
data: {} # Empty initially, will be populated by the init container

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default # The namespace where you want to list pods
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates core API group
  resources: ["pods"]
  verbs: ["list", "get"] # Add "get" if your init container also needs to get individual pods

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods-in-default
  namespace: default # Same namespace as the Role and the pod
subjects:
- kind: ServiceAccount
  name: default # The service account your pod uses (usually "default" if you haven't specified otherwise)
roleRef:
  kind: Role # This must be Role or ClusterRole
  name: pod-reader # The name of the Role you created
  apiGroup: rbac.authorization.k8s.io # This is the API group of the Role